using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Testing.Verifiers;
using System.Threading.Tasks;
using EntityFrameworkTraits;
using EntityFrameworkTraits.Tests;
using Xunit;

namespace EntityFrameworkTraits.Tests;

public class EFTraitBasedOnApplyTraitGeneratorTests: MyCustomSourceGeneratorTest<TraitBasedOnApplyTraitInvocationGenerator, DefaultVerifier>
{
    [Fact]
    public async Task GeneratesExpectedCode()
    {
        var source = @"
namespace TestNamespace;

public interface EntityTypeBuilder<TEntity> {
    void ApplyTrait<TEntity, TTrait>();
}

interface IMyTrait {
     public string Name { get; set; }
}

public partial class MyEntity {}

public class EntityConfiguration
{
    public void Configure(EntityTypeBuilder<MyEntity> builder)
    {
        builder.ApplyTrait<MyEntity, IMyTrait>();
    }
}
";
        
        TestState.Sources.Add(source);
        
        var expectedGeneratedCode = @"namespace TestNamespace;

// <auto-generated>
public partial class MyEntity : TestNamespace.IMyTrait
{
    public string Name { get; set; }
}
// </auto-generated>
";

        TestState.GeneratedSources.Add((
            typeof(TraitBasedOnApplyTraitInvocationGenerator), 
            "MyEntity.EFTrait.g.cs", 
            expectedGeneratedCode
        ));

        await RunAsync(CancellationToken.None);
    }
    
    [Fact]
    public async Task GeneratesExpectedCodeForMultiple()
    {
        var source = @"
namespace TestNamespace;

public interface EntityTypeBuilder<TEntity> {
    void ApplyTrait<TEntity, TTrait>();
}

interface IMyTrait {
     public string Name { get; set; }
}

interface IMyTrait2 {
     public string Name { get; set; }
}

public partial class MyEntity {}

public class EntityConfiguration
{
    public void Configure(EntityTypeBuilder<MyEntity> builder)
    {
        builder.ApplyTrait<MyEntity, IMyTrait>();
        builder.ApplyTrait<MyEntity, IMyTrait2>();
    }
}
";
        
        TestState.Sources.Add(source);
        
        var expectedGeneratedCode = @"namespace TestNamespace;

// <auto-generated>
public partial class MyEntity : TestNamespace.IMyTrait, TestNamespace.IMyTrait2
{
    public string Name { get; set; }
}
// </auto-generated>
";

        TestState.GeneratedSources.Add((
            typeof(TraitBasedOnApplyTraitInvocationGenerator), 
            "MyEntity.EFTrait.g.cs", 
            expectedGeneratedCode
        ));
        
        await this.RunAsync();
    }
}