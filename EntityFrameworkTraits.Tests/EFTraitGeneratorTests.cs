using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Testing.Verifiers;
using System.Threading.Tasks;
using EntityFrameworkTraits;
using EntityFrameworkTraits.Tests;
using Xunit;

namespace EntityFrameworkTraits.Tests;  

public class EFTraitGeneratorTests: MyCustomSourceGeneratorTest<TraitBasedOnAnnotationGenerator, DefaultVerifier>
{
    [Fact]
    public async Task GeneratesExpectedCode()
    {
        var source = @"
using System;  
namespace TestNamespace;
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
public class ApplyTraitAttribute: Attribute
{
    public Type[] Interfaces { get; }

    public ApplyTraitAttribute(params Type[] interfaces)
    {
        Interfaces = interfaces;
    }
}

interface IMyTrait {
     public string Name { get; set; }
}

[ApplyTrait(interfaces: typeof(IMyTrait))]
public partial class MyEntity {}
";

        // Add both sources to the test state
        this.TestState.Sources.Add(source);
        //this.TestState.Sources.Add(attributeSource);
        
        var expectedGeneratedCode = @"namespace TestNamespace;

// <auto-generated>
public partial class MyEntity : TestNamespace.IMyTrait
{
    public string Name { get; set; }
}
// </auto-generated>
";

        this.TestState.GeneratedSources.Add((
            typeof(TraitBasedOnAnnotationGenerator), 
            "MyEntity.EFTrait.g.cs", 
            expectedGeneratedCode
        ));

        // Run the test
        await this.RunAsync();
    }
    
    [Fact]
    public async Task GeneratesExpectedCodeForMultiple()
    {
        var source = @"
using System;  
namespace TestNamespace;
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
public class ApplyTraitAttribute: Attribute
{
    public Type[] Interfaces { get; }

    public ApplyTraitAttribute(params Type[] interfaces)
    {
        Interfaces = interfaces;
    }
}

interface IMyTrait {
     public string Name { get; set; }
}

interface IMyTrait2 {
     public string Name { get; set; }
}

[ApplyTrait(interfaces: new[] { typeof(IMyTrait), typeof(IMyTrait2) })]
public partial class MyEntity {}
";

        // Add both sources to the test state
        this.TestState.Sources.Add(source);
        //this.TestState.Sources.Add(attributeSource);
        
        var expectedGeneratedCode = @"namespace TestNamespace;

// <auto-generated>
public partial class MyEntity : TestNamespace.IMyTrait, TestNamespace.IMyTrait2
{
    public string Name { get; set; }
}
// </auto-generated>
";

        this.TestState.GeneratedSources.Add((
            typeof(TraitBasedOnAnnotationGenerator), 
            "MyEntity.EFTrait.g.cs", 
            expectedGeneratedCode
        ));

        // Run the test
        await this.RunAsync();
    }
}